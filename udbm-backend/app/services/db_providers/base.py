"""
数据库适配层 - 抽象接口
"""
from typing import Protocol, List, Dict, Any, Optional


class MonitorProvider(Protocol):
    def dashboard(self, database_id: int, hours: int = 24) -> Dict[str, Any]: ...
    def collect_metrics(self, database_id: int) -> List[Dict[str, Any]]: ...
    def save_metrics(self, metrics: List[Dict[str, Any]]): ...
    def history(self, database_id: int, metric_type: str, hours: int = 24): ...
    def latest_metrics(self, database_id: int) -> Dict[str, Any]: ...
    def alerts(self, database_id: int) -> List[Dict[str, Any]]: ...
    def recommendations(self, database_id: int) -> List[Dict[str, Any]]: ...
    def report(self, database_id: int, days: int = 7) -> Dict[str, Any]: ...
    def start_realtime(self, database_id: int, interval_seconds: int = 60) -> Dict[str, Any]: ...
    def stop_realtime(self, database_id: int) -> Dict[str, Any]: ...
    def status(self, database_id: int) -> Dict[str, Any]: ...


class SlowQueryProvider(Protocol):
    def list(self, database_id: int, limit: int, offset: int): ...
    def capture(self, database_id: int, threshold_seconds: float = 1.0) -> List[Dict[str, Any]]: ...
    def save(self, slow_query_data: Dict[str, Any]): ...
    def analyze_text(self, query_text: str, execution_time: float, rows_examined: int) -> Dict[str, Any]: ...
    def patterns(self, database_id: int, days: int = 7) -> Dict[str, Any]: ...
    def statistics(self, database_id: int, days: int = 7) -> Dict[str, Any]: ...


class ConfigOptimizerProvider(Protocol):
    def analyze_config(self, database_id: int) -> Dict[str, Any]: ...
    def maintenance_strategy(self, database_id: int) -> Dict[str, Any]: ...
    def optimize_memory(self, system_info: Dict[str, Any]) -> Dict[str, Any]: ...
    def optimize_connections(self, workload_info: Dict[str, Any]) -> Dict[str, Any]: ...
    def generate_tuning_script(self, analysis_results: Dict[str, Any]) -> str: ...


class TuningExecutorProvider(Protocol):
    def execute_task(self, task_id: int) -> Dict[str, Any]: ...
    def stats(self, database_id: Optional[int] = None) -> Dict[str, Any]: ...


class DatabaseProvider(Protocol):
    monitor: MonitorProvider
    slow_queries: SlowQueryProvider
    optimizer: ConfigOptimizerProvider
    executor: TuningExecutorProvider

